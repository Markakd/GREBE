// wasm-specific vet whitelist. See readme.txt for details.

// False positives.

// Nothing much to do about cross-package assembly. Unfortunate.
internal/bytealg/compare_wasm.s: [wasm] cannot check cross-package assembly function: Compare is in package bytes
internal/bytealg/compare_wasm.s: [wasm] cannot check cross-package assembly function: cmpstring is in package runtime

// morestack intentionally omits arg size.
runtime/asm_wasm.s: [wasm] morestack: use of 8(SP) points beyond argument frame
runtime/asm_wasm.s: [wasm] morestack: use of 16(SP) points beyond argument frame
runtime/asm_wasm.s: [wasm] morestack: use of 8(SP) points beyond argument frame

// rt0_go does not allocate a stack frame.
runtime/asm_wasm.s: [wasm] rt0_go: use of 8(SP) points beyond argument frame

// Calling WebAssembly import. No write from Go assembly.
runtime/sys_wasm.s: [wasm] nanotime: RET without writing to 8-byte ret+0(FP)
runtime/sys_wasm.s: [wasm] scheduleCallback: RET without writing to 4-byte ret+8(FP)
syscall/js/js_js.s: [wasm] stringVal: RET without writing to 8-byte ret+16(FP)
syscall/js/js_js.s: [wasm] valueGet: RET without writing to 8-byte ret+24(FP)
syscall/js/js_js.s: [wasm] valueIndex: RET without writing to 8-byte ret+16(FP)
syscall/js/js_js.s: [wasm] valueCall: RET without writing to 8-byte ret+48(FP)
syscall/js/js_js.s: [wasm] valueInvoke: RET without writing to 8-byte ret+32(FP)
syscall/js/js_js.s: [wasm] valueNew: RET without writing to 8-byte ret+32(FP)
syscall/js/js_js.s: [wasm] valueLength: RET without writing to 8-byte ret+8(FP)
syscall/js/js_js.s: [wasm] valuePrepareString: RET without writing to 8-byte ret+8(FP)
syscall/js/js_js.s: [wasm] valueInstanceOf: RET without writing to 1-byte ret+16(FP)
